# ===== Change window's size =====

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
nnoremap <space>t :WinResizerStartResize<CR>
'''

# ===== Display idnent vertically line =====
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_conceallevel  = &conceallevel
let g:indentLine_concealcursor = &concealcursor

nnoremap <silent> <space>it :IndentLinesToggle<CR>
let g:indentLine_color_term = 113
'''

# ===== Comment out =====
[[plugins]]
repo = 'tpope/vim-commentary'

# ===== Surround =====
[[plugins]]
repo = 'tpope/vim-surround'

[[plugin]]
repo = 'tpope/vim-repeat'

# ===== To make git even in vim =====
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap [git] <Nop>
map <C-g> [git]
nmap <silent> [git]a :GWrite<CR>
nmap <silent> [git]o :GBrowse<CR>
vmap <silent> [git]o :GBrowse<CR>
nmap <silent> [git]d :Gdiffsplit<CR>
vmap <silent> [git]d :Gdiffsplit<CR>
nmap <silent> [git]b :Git blame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
xnoremap [git]a :<C-u>call GitGutterStageSelectedHunk()<CR>

function! GitGutterStageSelectedHunk()
  let l:line_start = line("'<")
  let l:line_end = line("'>")
  execute l:line_start . "," . l:line_end . "GitGutterStageHunk"
  execute l:line_start . "," . l:line_end . "GitGutterStageHunk"
endfunction
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'

# ===== For pane of tmux controller =====
[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-t>h  :TmuxNavigateLeft<cr>
nnoremap <silent> <C-t>j  :TmuxNavigateDown<cr>
nnoremap <silent> <C-t>k  :TmuxNavigateUp<cr>
nnoremap <silent> <C-t>l  :TmuxNavigateRight<cr>
nnoremap <silent> <C-t>\\ :TmuxNavigatePrevious<cr>
'''

# ===== Replace =====
[[plugins]]
repo = 'kqito/vim-easy-replace'
hook_add = '''
nnoremap <silent> <space>ra :EasyReplaceWord<cr>
nnoremap <silent> <space>ra :EasyReplaceCword<cr>
vnoremap <silent> <space>rc :EasyReplaceWordInVisual<cr>
vnoremap <silent> <space>rc :EasyReplaceCwordInVisual<cr>
'''


# ===== easymotion =====
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
nmap m <Plug>(easymotion-overwin-f)
 " type `l` and match `l`&`L`
let g:EasyMotion_smartcase = 1
" Smartsign (type `3` and match `3`&`#`)
let g:EasyMotion_use_smartsign_us = 1
'''



# ===== easymotion =====
[[plugins]]
repo = 'monaqa/dial.nvim'
hook_add = '''
lua <<EOF
  vim.keymap.set("n", "<C-a>", require("dial.map").inc_normal(), {noremap = true})
  vim.keymap.set("n", "<C-x>", require("dial.map").dec_normal(), {noremap = true})
  vim.keymap.set("v", "<C-a>", require("dial.map").inc_visual(), {noremap = true})
  vim.keymap.set("v", "<C-x>", require("dial.map").dec_visual(), {noremap = true})
  vim.keymap.set("v", "g<C-a>",require("dial.map").inc_gvisual(), {noremap = true})
  vim.keymap.set("v", "g<C-x>",require("dial.map").dec_gvisual(), {noremap = true})

  local augend = require("dial.augend")
  require("dial.config").augends:register_group{
    -- default augends used when no group name is specified
    default = {
      augend.integer.alias.decimal,   -- nonnegative decimal number (0, 1, 2, 3, ...)
      augend.integer.alias.hex,       -- nonnegative hex number  (0x01, 0x1a1f, etc.)
      augend.date.alias["%Y/%m/%d"],  -- date (2022/02/19, etc.)
      augend.constant.alias.bool,    -- boolean value (true <-> false)
    },

    -- augends used when group with name `mygroup` is specified
    mygroup = {
      augend.integer.alias.decimal,
      augend.date.alias["%m/%d/%Y"], -- date (02/19/2022, etc.)
    }
  }

EOF
'''

# ===== For automatically cargo check =====
[[plugins]]
repo = '907th/vim-auto-save'
hook_add = '''
let g:auto_save = 0
" let g:auto_save_silent = 1
augroup ft_markdown
  au!
  au FileType rust let b:auto_save = 1
augroup END

let g:auto_save_events = ["InsertLeave", "TextChanged"]

" Prevent auto code formatting when saving
let g:auto_save_presave_hook = "call coc#config('coc.preferences.formatOnSaveFiletypes', [])"
let g:auto_save_postsave_hook = "call coc#config('coc.preferences.formatOnSaveFiletypes', ['*'])"
'''

# # ===== Github copilot =====
# NOTE: This plugin will map `<Tab>` in insert mode. This will cause conflict with coc's '<Tab>'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
let g:copilot_no_tab_map = v:true
imap <silent><script><expr> <C-f> copilot#Accept("\<CR>")
imap <silent> <C-c> <ESC>:Copilot<CR>
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
depends = ['nvim-lua/plenary.nvim']
hook_add = '''
lua << EOF
local function my_on_attach(bufnr)
  local api = require "nvim-tree.api"

  local function opts(desc)
    return { desc = "nvim-tree: " .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
  end

  -- default mappings
  api.config.mappings.default_on_attach(bufnr)

  -- custom mappings
  -- https://github.com/kunish/nvim-tree.lua/blob/45400cd7e02027937cd5e49845545e606ecf5a1f/doc/nvim-tree-lua.txt#L1579
  vim.keymap.set('n', '<C-t>', api.tree.change_root_to_parent,        opts('Up'))
  vim.keymap.set('n', '?',     api.tree.toggle_help,                  opts('Help'))
  vim.keymap.set('n', 'l',     api.node.open.edit,                    opts('Open Directory'))
  vim.keymap.set('n', 'h',     api.node.navigate.parent_close,        opts('Close Directory'))
  vim.keymap.set('n', 'v',     api.node.open.vertical,                opts('Open: Vertical Split'))
  vim.keymap.set('n', 's',     api.node.open.horizontal,              opts('Open: Horizontal Split'))
  vim.keymap.set('n',  'y',    api.fs.copy.absolute_path,             opts('Copy Absolute Path'))
  vim.keymap.set('n',  'e',    api.node.open.tab,                     opts('Copy Absolute Path'))
end

-- pass to setup along with your other options
require("nvim-tree").setup {
  auto_reload_on_write = true,
  disable_netrw = true,
  hijack_netrw = true,
  update_cwd = true,
  actions = {
    open_file = {
      quit_on_open = true,
    },
  },
  on_attach = my_on_attach,
}

vim.api.nvim_set_keymap('n', '<space>b', ':NvimTreeFindFileToggle<CR>', { noremap = true, silent = true })
EOF
'''
