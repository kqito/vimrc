# ===== Language servers settings =====
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
trusted = 1
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

let g:coc_filetype_map = {
  \ '*.jsx': 'javascriptreact',
  \ '*.tsx': 'typescriptreact',
\ }

let g:coc_global_extensions = [
  \ 'coc-browser',
  \ 'coc-calc',
  \ 'coc-clock',
  \ 'coc-css',
  \ 'coc-emmet',
  \ 'coc-eslint8',
  \ 'coc-explorer',
  \ 'coc-git',
  \ 'coc-github',
  \ 'coc-gitignore',
  \ 'coc-go',
  \ 'coc-html',
  \ 'coc-jest',
  \ 'coc-json',
  \ 'coc-lines',
  \ 'coc-lists',
  \ 'coc-lua',
  \ 'coc-marketplace',
  \ 'coc-omni',
  \ 'coc-omnisharp',
  \ 'coc-pairs',
  \ 'coc-phpls',
  \ 'coc-prettier',
  \ 'coc-project',
  \ 'coc-python',
  \ 'coc-rust-analyzer',
  \ 'coc-sh',
  \ 'coc-sql',
  \ 'coc-syntax',
  \ 'coc-stylelintplus',
  \ 'coc-tabnine',
  \ 'coc-tag',
  \ 'coc-todolist',
  \ 'coc-translator',
  \ 'coc-tsserver',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-vimtex',
  \ 'coc-webpack',
  \ 'coc-word',
  \ 'coc-xml',
  \ 'coc-yaml',
  \ 'coc-yank',
\ ]

" ===== Completion ======
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" ===== Jumps ======
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-declaration)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gu <Plug>(coc-references-used)
nmap <silent> gb <C-o>

" Use K to show documentation in preview window
nnoremap <silent> <space>d :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for format selected region
xmap <space>f  <Plug>(coc-format-selected)
nmap <space>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<space>aap` for current paragraph
xmap <space>a  <Plug>(coc-codeaction-selected)
nmap <space>a  <Plug>(coc-codeaction-selected)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" ===== CocCommand ======
nnoremap <silent> <space>c :CocCommand<CR>

" For prettier settings
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" ===== QuickFix ======
nnoremap <silent> <space>. <plug>(coc-codeaction-line)
vnoremap <silent> <space>. <plug>(coc-codeaction-selected)
nnoremap <silent> <space>rr  <plug>(coc-refactor)
nnoremap <silent> <space>rn <Plug>(coc-rename)
" This map needs `watchman` command installed in $PATH
nnoremap <silent> <space>rf :CocCommand workspace.renameCurrentFile<CR>


" ===== Disgnostics ======
nmap <silent> <space>k <Plug>(coc-diagnostic-prev)
nmap <silent> <space>j <Plug>(coc-diagnostic-next)

" ===== Markdown ======
let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'typescript']

" ===== CocList =====
nnoremap <space>b :CocCommand explorer --quit-on-open<CR>

" ===== CocList =====
noremap [coc-list] <Nop>
map s [coc-list]

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<CR>

" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<CR>

" Yank
nnoremap <silent> <space>y     :<C-u>CocList -A --normal yank<CR>

" Find symbol of current document
nnoremap <silent> [coc-list]o  :<C-u>CocList -A outline<CR>

" Search workspace symbols
nnoremap <silent> [coc-list]w  :<C-u>CocList -A -I symbols<CR>

" Search workspace symbols
nnoremap <silent> [coc-list]g  :<C-u>CocList -A -I grep<CR>

" Grep current word
nnoremap <silent> [coc-list]s  :exe 'CocList -A -I --input='.expand('<cword>').' grep'<CR>

" File ( Search from project root )
nnoremap <silent> [coc-list]p  :<C-u>CocList files<CR>

" File ( Search from current dir )
let g:vim_open_path = getcwd()
nnoremap <silent> [coc-list]c  :exe 'CocList --input=' . fnamemodify(g:vim_open_path, ':t') . '/' . ' files'<CR>

" Error Occured File ( Search from current dir )
nnoremap <silent> [coc-list]e :<C-u>CocList diagnostics<CR>

" Mru
nnoremap <silent> [coc-list]y  :<C-u>CocList mru<CR>

" Buffer
nnoremap <silent> [coc-list]b  :<C-u>CocList buffers<CR>

" help vim
nnoremap <silent> [coc-list]h  :<C-u>CocList helptags<CR>
'''
